import streamlit as st
import numpy as np
import pickle
import warnings
from sentence_transformers import SentenceTransformer
import pandas as pd

# Set Streamlit page configuration (must be the first Streamlit command)
st.set_page_config(page_title="Cybersecurity Vulnerability Predictor", page_icon="üîí")

# Suppress all warnings
warnings.filterwarnings("ignore")

# Cache the SentenceTransformer model to load it only once
@st.cache_resource
def load_sentence_transformer():
    return SentenceTransformer('sentence-transformers/all-mpnet-base-v2')

# Cache the regression and classification models
@st.cache_resource
def load_model(model_path):
    with open(model_path, 'rb') as file:
        return pickle.load(file)

# Load the SentenceTransformer model (must be done before using it)
model = load_sentence_transformer()

# Cache the regression models
base_path = r'C:\Users\pradeep dubey\Desktop\NLP_Project\MODELS2'
regression_models = {
    "Impact_Score": load_model(base_path + "\Impact_Score_xgb_regressor.pkl"),
    "Base_Score": load_model(base_path + "\BASE_SCORE_xgb_regressor.pkl"),
    "Exploitability_Score": load_model(base_path + "\Exploitability_Score_xgb_regressor.pkl")
}

# Cache the classification models and label encoders
classification_models = {
    "Access_Complexity": (load_model(base_path + "\\Access_Complexity_best_catboost_model.pkl"),
                          load_model(base_path + "\\Access_Complexity_label_encoder.pkl")),
    "Access_Vector": (load_model(base_path + "\\accessVector_best_catboost_model.pkl"),
                      load_model(base_path + "\\Access_Vector_label_encoder.pkl")),
    "Availability_Impact": (load_model(base_path + "\\Availability_Impact_best_catboost_model.pkl"),
                            load_model(base_path + "\\Availability_Impact_label_encoder.pkl")),
    "Confidentiality_Impact": (load_model(base_path + "\\Confidentiality_Impact_best_xgboost_model.pkl"),
                               load_model(base_path + "\\Confidentiality_Impact_label_encoder.pkl")),
    "Integrity_Impact": (load_model(base_path + "\\Integrity_Impact_best_xgboost_model.pkl"),
                         load_model(base_path + "\\Integrity_Impact_label_encoder.pkl")),
}

# Function to predict metrics
def predict_metrics(description, model):
    # Encode the input description using the SentenceTransformer model
    embedding = model.encode(description, convert_to_tensor=True).cpu().numpy().reshape(1, -1)

    predicted_outputs = {}

    # Predictions for regression models
    for target, model in regression_models.items():
        predicted_output = model.predict(embedding).flatten()
        predicted_outputs[target] = predicted_output[0]

    # Predictions for classification models
    for target, (model, encoder) in classification_models.items():
        predicted_label_encoded = model.predict(embedding).flatten()
        predicted_label = encoder.inverse_transform(predicted_label_encoded.astype(int))
        predicted_outputs[target] = predicted_label[0]

    return predicted_outputs

# Custom CSS for styling
st.markdown("""
    <style>
        /* Global background color */
        .main {
            background-color: #2e2e2e;
            color: #FFFFFF;
            padding: 30px;
        }

        /* Title style */
        .title {
            font-size: 3em;
            font-weight: bold;
            color: #FFFFFF;
            text-align: center;
            margin-top: 20px;
            animation: fadeInTitle 2s ease-in;
        }

        /* Button styling */
        div.stButton > button {
            background-color: #FF6B6B;
            color: white;
            font-size: 20px;
            font-weight: bold;
            padding: 12px 24px;
            border-radius: 12px;
            transition: background-color 0.3s ease;
            animation: pulse 2s infinite;
        }
        div.stButton > button:hover {
            background-color: #FF4B4B;
        }

        /* Fade-in animation */
        @keyframes fadeInTitle {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Pulsing button animation */
        @keykeyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Table Styling */
        .table {
            background-color: #333333;
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
        }

        .table th {
            color: #FFFFFF;
            font-weight: bold;
            font-size: 20px;
        }

        .table td {
            color: #FFFFFF;
            font-size: 18px;
        }

        /* Footer */
        footer {
            font-size: 1.2em;
            text-align: center;
            color: #aaaaaa;
            margin-top: 30px;
        }
    </style>
""", unsafe_allow_html=True)

# App title with emoji
st.markdown("<h1 class='title'>üîí Cybersecurity Vulnerability Metric Predictor</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; font-size: 1.3em; color: #bbbbbb;'>Leverage AI to assess key security metrics for your cybersecurity descriptions.</p>", unsafe_allow_html=True)

# User input area with dark background
st.markdown("### üìù Enter Vulnerability Description")
description = st.text_area("Enter description here:", placeholder="Type a detailed vulnerability description...", height=150)

# Predict button
if st.button("üîç Predict Metrics"):
    if description.strip():
        # Run prediction
        predicted_metrics = predict_metrics(description, model)
        
        # Display predicted metrics in a table
        st.markdown("<div class='table'>", unsafe_allow_html=True)
        # Create a DataFrame to display predictions in tabular format
        df = pd.DataFrame(list(predicted_metrics.items()), columns=["Metric", "Prediction"])
        st.table(df)
        st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.warning("‚ö†Ô∏è Please enter a vulnerability description to predict metrics.")

# Footer with improved contrast and styling
st.markdown("<hr style='border: 1px solid #555;'>", unsafe_allow_html=True)
st.markdown("<footer>Built with ‚ù§Ô∏è using Streamlit & Machine Learning</footer>", unsafe_allow_html=True)
st.markdown("<footer>üåê Connect with us on [GitHub](https://github.com) | [LinkedIn](https://linkedin.com)</footer>", unsafe_allow_html=True)
